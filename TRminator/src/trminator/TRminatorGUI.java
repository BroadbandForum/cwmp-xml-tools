/*
 * File: TRminatorGUI.java
 * Project: TRminator
 * Author: Jeff Houle
 *
 */
package trminator;

import threepio.engine.Threepio;
import threepio.documenter.XDocumenter;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

import javax.swing.JTextField;
import threepio.filehandling.FileIntake;
import threepio.tabler.container.IndexedHashMap;
import threepio.tabler.container.ModelTable;

/**
 * TRminatorGUI is a Threepio GUI.
 * It's where user I/O occurs.
 * It relies on Threepio for most functionality.
 * @author jhoule
 * @see Threepio
 */
public class TRminatorGUI extends javax.swing.JFrame
{

    private File fileIn1, fileIn2, fileOut;
    private boolean goodToGo;
    private String containerName;
    private ArrayList<String> modelNames1, modelNames2;
    private boolean debugMode = false;
    private IndexedHashMap cols = new IndexedHashMap();

    /**
     * Creates new TRminatorGUI form.
     * auto-fills the column map, which is user-editable.
     */
    public TRminatorGUI(String appVersion)
    {
        initComponents();
        this.setTitle("TRminator");
        lblVersion.setText(appVersion);
        clearFields(true);
        setupColumns();
        updateFormForMode();
    }

    /**
     * Sets up the columns map, with default values.
     */
    void setupColumns()
    {
        // put entries IN ORDER for columns here.
        // first string is friendly name, second is hard-coded name.
        // hard-coded name is IMPORTANT to have EXACT.

        cols.put("Name", "name");
        cols.put("Type", "syntax");
        cols.put("Write", "access");
        cols.put("Description", "description");
        cols.put("Default", "default");
        cols.put("Version", "version");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpMode = new javax.swing.ButtonGroup();
        diaOptions = new javax.swing.JDialog();
        pnlInput0 = new javax.swing.JPanel();
        pnlInput2 = new javax.swing.JPanel();
        pnlModel2 = new javax.swing.JPanel();
        lblModel2 = new javax.swing.JLabel();
        txtModelName2 = new javax.swing.JTextField();
        txtFileIn2 = new javax.swing.JTextField();
        lblInFile2 = new javax.swing.JLabel();
        btnInBrowse2 = new javax.swing.JButton();
        pnlInput1 = new javax.swing.JPanel();
        pnlModel1 = new javax.swing.JPanel();
        lblModel1 = new javax.swing.JLabel();
        txtModelName1 = new javax.swing.JTextField();
        btnInBrowse1 = new javax.swing.JButton();
        txtFileIn1 = new javax.swing.JTextField();
        lblInFile1 = new javax.swing.JLabel();
        lblDir = new javax.swing.JLabel();
        lblDirName = new javax.swing.JLabel();
        pnlContainer = new javax.swing.JPanel();
        lblContainerName = new javax.swing.JLabel();
        txtContainerName = new javax.swing.JTextField();
        pnlOptions = new javax.swing.JPanel();
        chkDiff = new javax.swing.JCheckBox();
        chkProfiles = new javax.swing.JCheckBox();
        chkLooks = new javax.swing.JCheckBox();
        pnlOut = new javax.swing.JPanel();
        btnOutBrowse = new javax.swing.JButton();
        txtFileOut = new javax.swing.JTextField();
        lblOutFile = new javax.swing.JLabel();
        pnlMode = new javax.swing.JPanel();
        radVDT = new javax.swing.JRadioButton();
        radGXT = new javax.swing.JRadioButton();
        radNSDDT = new javax.swing.JRadioButton();
        btnGo = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblVersion = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDone = new javax.swing.JTextArea();
        menuBarMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuBtnChangeDir = new javax.swing.JMenuItem();
        mnuBtnExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuCols = new javax.swing.JMenuItem();

        diaOptions.setAlwaysOnTop(true);
        diaOptions.setMinimumSize(new java.awt.Dimension(500, 300));

        javax.swing.GroupLayout diaOptionsLayout = new javax.swing.GroupLayout(diaOptions.getContentPane());
        diaOptions.getContentPane().setLayout(diaOptionsLayout);
        diaOptionsLayout.setHorizontalGroup(
            diaOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        diaOptionsLayout.setVerticalGroup(
            diaOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        pnlInput2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input 2", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 12))); // NOI18N
        pnlInput2.setEnabled(false);

        lblModel2.setFont(new java.awt.Font("Arial", 1, 14));
        lblModel2.setText("Model:");

        txtModelName2.setEditable(false);

        javax.swing.GroupLayout pnlModel2Layout = new javax.swing.GroupLayout(pnlModel2);
        pnlModel2.setLayout(pnlModel2Layout);
        pnlModel2Layout.setHorizontalGroup(
            pnlModel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModel2Layout.createSequentialGroup()
                .addComponent(lblModel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtModelName2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addGap(95, 95, 95))
        );
        pnlModel2Layout.setVerticalGroup(
            pnlModel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblModel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtModelName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        txtFileIn2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFileIn2PropertyChange(evt);
            }
        });
        txtFileIn2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFileIn2KeyTyped(evt);
            }
        });

        lblInFile2.setFont(new java.awt.Font("Arial", 1, 14));
        lblInFile2.setText("File:");

        btnInBrowse2.setText("Browse...");
        btnInBrowse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInBrowse2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInput2Layout = new javax.swing.GroupLayout(pnlInput2);
        pnlInput2.setLayout(pnlInput2Layout);
        pnlInput2Layout.setHorizontalGroup(
            pnlInput2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInput2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlInput2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInput2Layout.createSequentialGroup()
                        .addComponent(pnlModel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInput2Layout.createSequentialGroup()
                        .addComponent(lblInFile2)
                        .addGap(36, 36, 36)
                        .addComponent(txtFileIn2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInBrowse2)
                        .addGap(28, 28, 28))))
        );
        pnlInput2Layout.setVerticalGroup(
            pnlInput2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInput2Layout.createSequentialGroup()
                .addGroup(pnlInput2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInFile2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFileIn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInBrowse2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlModel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInput1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input 1", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 12))); // NOI18N

        lblModel1.setFont(new java.awt.Font("Arial", 1, 14));
        lblModel1.setLabelFor(lblModel1);
        lblModel1.setText("Model:");

        txtModelName1.setEditable(false);

        javax.swing.GroupLayout pnlModel1Layout = new javax.swing.GroupLayout(pnlModel1);
        pnlModel1.setLayout(pnlModel1Layout);
        pnlModel1Layout.setHorizontalGroup(
            pnlModel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblModel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtModelName1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        pnlModel1Layout.setVerticalGroup(
            pnlModel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtModelName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblModel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnInBrowse1.setText("Browse...");
        btnInBrowse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInBrowse1ActionPerformed(evt);
            }
        });

        txtFileIn1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFileIn1PropertyChange(evt);
            }
        });
        txtFileIn1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFileIn1KeyTyped(evt);
            }
        });

        lblInFile1.setFont(new java.awt.Font("Arial", 1, 14));
        lblInFile1.setLabelFor(lblInFile1);
        lblInFile1.setText("File:");

        lblDir.setFont(new java.awt.Font("Arial", 1, 14));
        lblDir.setLabelFor(lblDirName);
        lblDir.setText("Working Directory:");

        lblDirName.setFont(new java.awt.Font("Arial", 0, 14));
        lblDirName.setForeground(new java.awt.Color(255, 51, 51));
        lblDirName.setText("<Directory>");

        javax.swing.GroupLayout pnlInput1Layout = new javax.swing.GroupLayout(pnlInput1);
        pnlInput1.setLayout(pnlInput1Layout);
        pnlInput1Layout.setHorizontalGroup(
            pnlInput1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInput1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInput1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInput1Layout.createSequentialGroup()
                        .addComponent(lblInFile1)
                        .addGap(36, 36, 36)
                        .addComponent(txtFileIn1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInBrowse1))
                    .addGroup(pnlInput1Layout.createSequentialGroup()
                        .addComponent(lblDir, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDirName, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlModel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pnlInput1Layout.setVerticalGroup(
            pnlInput1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInput1Layout.createSequentialGroup()
                .addGroup(pnlInput1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInFile1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFileIn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInBrowse1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInput1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlModel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "XML Container", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        pnlContainer.setEnabled(false);

        lblContainerName.setFont(new java.awt.Font("Arial", 1, 14));
        lblContainerName.setLabelFor(txtContainerName);
        lblContainerName.setText("Name:");

        txtContainerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContainerNameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblContainerName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Misc. Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 14))); // NOI18N

        chkDiff.setFont(new java.awt.Font("Arial", 1, 12));
        chkDiff.setSelected(true);
        chkDiff.setText("Diff final two tables");
        chkDiff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDiffActionPerformed(evt);
            }
        });

        chkProfiles.setFont(new java.awt.Font("Arial", 1, 12));
        chkProfiles.setText("Include profile table");
        chkProfiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkProfilesActionPerformed(evt);
            }
        });

        chkLooks.setFont(new java.awt.Font("Arial", 1, 12));
        chkLooks.setSelected(true);
        chkLooks.setText("Format cells to fixed width");

        javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDiff)
                    .addComponent(chkProfiles)
                    .addComponent(chkLooks))
                .addContainerGap(241, Short.MAX_VALUE))
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkDiff)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkProfiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkLooks))
        );

        javax.swing.GroupLayout pnlInput0Layout = new javax.swing.GroupLayout(pnlInput0);
        pnlInput0.setLayout(pnlInput0Layout);
        pnlInput0Layout.setHorizontalGroup(
            pnlInput0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInput0Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInput0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlOptions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlContainer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlInput2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(pnlInput1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlInput0Layout.setVerticalGroup(
            pnlInput0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInput0Layout.createSequentialGroup()
                .addComponent(pnlInput1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlOut.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 12))); // NOI18N

        btnOutBrowse.setText("Browse...");
        btnOutBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutBrowseActionPerformed(evt);
            }
        });

        txtFileOut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFileOutKeyTyped(evt);
            }
        });

        lblOutFile.setFont(new java.awt.Font("Arial", 1, 14));
        lblOutFile.setLabelFor(txtFileOut);
        lblOutFile.setText("File:");

        javax.swing.GroupLayout pnlOutLayout = new javax.swing.GroupLayout(pnlOut);
        pnlOut.setLayout(pnlOutLayout);
        pnlOutLayout.setHorizontalGroup(
            pnlOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOutLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(lblOutFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFileOut, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnOutBrowse))
        );
        pnlOutLayout.setVerticalGroup(
            pnlOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOutLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutFile, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFileOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOutBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlMode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 14))); // NOI18N

        btnGrpMode.add(radVDT);
        radVDT.setSelected(true);
        radVDT.setText("Versioned Document -> Table");
        radVDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radVDTActionPerformed(evt);
            }
        });

        btnGrpMode.add(radGXT);
        radGXT.setText("General XML - > Table");
        radGXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGXTActionPerformed(evt);
            }
        });

        btnGrpMode.add(radNSDDT);
        radNSDDT.setText("Non-Sequential Documents -> Diff Table");
        radNSDDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radNSDDTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlModeLayout = new javax.swing.GroupLayout(pnlMode);
        pnlMode.setLayout(pnlModeLayout);
        pnlModeLayout.setHorizontalGroup(
            pnlModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlModeLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(pnlModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radGXT)
                    .addComponent(radNSDDT)
                    .addComponent(radVDT))
                .addContainerGap())
        );
        pnlModeLayout.setVerticalGroup(
            pnlModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModeLayout.createSequentialGroup()
                .addComponent(radVDT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radGXT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(radNSDDT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGo.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnGo.setText("GO");
        btnGo.setEnabled(false);
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trminator/img/iol_neon_TR.jpg"))); // NOI18N
        lblLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoMouseClicked(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblVersion.setText("TRminator Version");

        btnLoad.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnLoad.setText("Load Model");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        txtDone.setBackground(javax.swing.UIManager.getDefaults().getColor("TextArea.disabledBackground"));
        txtDone.setColumns(20);
        txtDone.setEditable(false);
        txtDone.setRows(2);
        jScrollPane1.setViewportView(txtDone);

        mnuFile.setText("File");

        mnuBtnChangeDir.setText("Change Working Directory");
        mnuFile.add(mnuBtnChangeDir);

        mnuBtnExit.setText("Exit");
        mnuBtnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBtnExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuBtnExit);

        menuBarMain.add(mnuFile);

        mnuEdit.setText("Edit");

        mnuCols.setText("change cols");
        mnuCols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuColsActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuCols);

        menuBarMain.add(mnuEdit);

        setJMenuBar(menuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLogo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                .addComponent(pnlMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlInput0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(138, 138, 138))
                    .addComponent(lblVersion))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlInput0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnlMode, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLogo))
                                .addGap(27, 27, 27)
                                .addComponent(pnlOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                        .addComponent(lblVersion))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * when the go button is clicked, the process selected by the user is carried out.
     * @param evt - the event.
     */
    private void btnGoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnGoActionPerformed
    {//GEN-HEADEREND:event_btnGoActionPerformed
        process();
    }//GEN-LAST:event_btnGoActionPerformed

    /**
     * When the button for browsing for an output file is clicked,
     * the filechooser launches to find a save path, and the UI
     * is updated for that.
     * @param evt - the ActionEvent of the click.
     */
    private void btnOutBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutBrowseActionPerformed
    {//GEN-HEADEREND:event_btnOutBrowseActionPerformed
        useFileChooser(txtFileOut, false, new File(txtFileIn1.getText()).getParentFile());
    }//GEN-LAST:event_btnOutBrowseActionPerformed

    /**
     * When the user clicks "browse" on the first input,
     * the filechooser is launched, changing the first file path.
     * @param evt - the ActionEvent of the click.
     */
    private void btnInBrowse1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnInBrowse1ActionPerformed
    {//GEN-HEADEREND:event_btnInBrowse1ActionPerformed
        useFileChooser(txtFileIn1, true, new File(txtFileIn1.getText()).getParentFile());
    }//GEN-LAST:event_btnInBrowse1ActionPerformed

    /**
     * When the user clicks "browse" on the second input,
     * the filechooser is launched, changing the second file path.
     * @param evt - the ActionEvent of the click.
     */
    private void btnInBrowse2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnInBrowse2ActionPerformed
    {//GEN-HEADEREND:event_btnInBrowse2ActionPerformed
        useFileChooser(txtFileIn2, true, new File(txtFileIn1.getText()).getParentFile());
    }//GEN-LAST:event_btnInBrowse2ActionPerformed

    /**
     * When the load button is pressed, the user's input is checked,
     * and the GO button is enabled based on the check.
     * @param evt - the ActionEvent of the click.
     */
    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoadActionPerformed
    {//GEN-HEADEREND:event_btnLoadActionPerformed
        btnGo.setEnabled(goodToGo = load());
}//GEN-LAST:event_btnLoadActionPerformed

    /**
     * disables the Go button, because the user is modifying something.
     * @param evt - the ActionEvent of the modification.
     */
    private void txtFileIn2KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtFileIn2KeyTyped
    {//GEN-HEADEREND:event_txtFileIn2KeyTyped
        fileChanging();
    }//GEN-LAST:event_txtFileIn2KeyTyped

    /**
     * disables the Go button, because the user is modifying something.
     * @param evt - the ActionEvent of the modification.
     */
    private void txtContainerNameKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtContainerNameKeyTyped
    {//GEN-HEADEREND:event_txtContainerNameKeyTyped
        noGo();
    }//GEN-LAST:event_txtContainerNameKeyTyped

    /**
     * disables the Go button, because the user is modifying something.
     * @param evt - the ActionEvent of the modification.
     */
    private void txtFileOutKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtFileOutKeyTyped
    {//GEN-HEADEREND:event_txtFileOutKeyTyped
        noGo();
    }//GEN-LAST:event_txtFileOutKeyTyped

    /**
     * debug only: does something when the logo is clicked.
     *
     * @param evt - the ActionEvent of the click.
     */
    private void lblLogoMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblLogoMouseClicked
    {//GEN-HEADEREND:event_lblLogoMouseClicked
        magic();
    }//GEN-LAST:event_lblLogoMouseClicked

    /**
     * picks up a click of a change model button for input #1,
     * and updates the form for that.
     * @param evt - the ActionEvent of the click
     */
    private void mnuColsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuColsActionPerformed
    {//GEN-HEADEREND:event_mnuColsActionPerformed

        IHMEditPanel pnlCol = new IHMEditPanel(cols, "Column Name", "XML Value");

        pnlCol.setVisible(true);
        diaOptions = new JDialog();
        diaOptions.setContentPane(pnlCol);
        diaOptions.setSize(500, 300);
        diaOptions.setVisible(true);
    }//GEN-LAST:event_mnuColsActionPerformed

    /**
     * exits the program when the user clicks Exit on the file menu.
     * @param evt - the event for the click
     */
    private void mnuBtnExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuBtnExitActionPerformed
    {//GEN-HEADEREND:event_mnuBtnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuBtnExitActionPerformed

    /**
     * Changes the output box based on an option change.
     * @param evt - the event of the option change.
     */
    private void chkDiffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkDiffActionPerformed
    {//GEN-HEADEREND:event_chkDiffActionPerformed
        if (btnGo.isEnabled())
        {
            txtDone.setText("File(s) loaded\nclick GO to reprocess with new options");
        } else
        {
            txtDone.setText("New options are in effect.");
        }
    }//GEN-LAST:event_chkDiffActionPerformed

    /**
     * does form stuff when a change occurs in the input field.
     * @param evt - the event of the change.
     */
    private void txtFileIn1PropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_txtFileIn1PropertyChange
    {//GEN-HEADEREND:event_txtFileIn1PropertyChange
        fileChanging();
    }//GEN-LAST:event_txtFileIn1PropertyChange

    /**
     * does form stuff when a change occurs in the input field.
     * @param evt - the event of the change.
     */
    private void txtFileIn1KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtFileIn1KeyTyped
    {//GEN-HEADEREND:event_txtFileIn1KeyTyped
        fileChanging();
    }//GEN-LAST:event_txtFileIn1KeyTyped

    /**
     * does form stuff when a change occurs in the input field.
     * @param evt - the event of the change.
     */
    private void txtFileIn2PropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_txtFileIn2PropertyChange
    {//GEN-HEADEREND:event_txtFileIn2PropertyChange
        fileChanging();
    }//GEN-LAST:event_txtFileIn2PropertyChange

    /**
     * Changes the mode, becasue the mode radio button has been changed.
     * @param evt - the event of the change.
     */
    private void radVDTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radVDTActionPerformed
    {//GEN-HEADEREND:event_radVDTActionPerformed
        updateFormForMode();
    }//GEN-LAST:event_radVDTActionPerformed

    /**
     * Changes the mode, becasue the mode radio button has been changed.
     * @param evt - the event of the change.
     */
    private void radGXTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radGXTActionPerformed
    {//GEN-HEADEREND:event_radGXTActionPerformed
        updateFormForMode();
    }//GEN-LAST:event_radGXTActionPerformed

    /**
     * Changes the mode, becasue the mode radio button has been changed.
     * @param evt - the event of the change.
     */
    private void radNSDDTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radNSDDTActionPerformed
    {//GEN-HEADEREND:event_radNSDDTActionPerformed
        updateFormForMode();
    }//GEN-LAST:event_radNSDDTActionPerformed

    private void chkProfilesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkProfilesActionPerformed
    {//GEN-HEADEREND:event_chkProfilesActionPerformed
        if (btnGo.isEnabled())
        {
            txtDone.setText("File(s) loaded\nclick GO to reprocess with new options");
        } else
        {
            txtDone.setText("New options are in effect.");
        }
    }//GEN-LAST:event_chkProfilesActionPerformed

    /**
     * called when a file input field is changing, to keep the user from running
     * the main function when their input is not good.
     */
    private void fileChanging()
    {
        clearFields(false, false);
        noGo();
    }

    /**
     * Changes the model, based on what the user has input on the UI.
     * @param which - the number of the model to change, based on the input.
     */
    private boolean changeModel(int which) throws Exception
    {
        XDocumenter doccer = new XDocumenter();

        JTextField field = null;
        ArrayList<String> names = new ArrayList<String>();

        btnGo.setEnabled(false);

        // pick the fields and names based on which model we're chagning.
        switch (which)
        {
            case 1:
                field = txtModelName1;
                names = modelNames1;

                break;

            case 2:
                field = txtModelName2;
                names = modelNames2;

                break;
            default:
                // shouldn't get here.
                throw new Exception("attempting to change a model that doesn't exist!");
        }

        // check if there are models avialble, prompt user if there are multiple ones.
        switch (names.size())
        {

            case 0:
                // no models.
                JOptionPane.showMessageDialog(this, "No models found", "Check Files", JOptionPane.ERROR_MESSAGE);

                return (false);

            case 1:
                // only one model. no user intervention required.
                field.setText(names.get(0));
                break;

            default:
                // multiple models. ask the user.
                ListChooserPanel pnlMod = new ListChooserPanel(doccer.getModelNames(fileIn1), txtModelName1.getText(), diaOptions);

                diaOptions.setTitle("Choose Model #" + which);
                diaOptions.setContentPane(pnlMod);
                diaOptions.setSize(pnlMod.getSize());
                diaOptions.setModal(true);
                diaOptions.setVisible(true);

                field.setText(pnlMod.getChosenValue());
                break;
        }

        return true;
    }

    /**
     * DEBUGGING ONLY: fills in some fields for faster debugging.
     */
    private void magic()
    {
        String f1 = null, f2 = null;
        boolean diff = true;

        if (debugMode)
        {
            switch (getMode())
            {
                case 0:

                    f1 = "c:\\testing\\xml\\tr-098-1-2-0.xml";

                    break;
                case 1:

                    break;
                case 2:
                    f1 = "c:\\testing\\xml\\tr-098-1-2-0.xml";
                    f2 = "c:\\testing\\xml\\tr-098-1-0.xml";

                    break;
            }

            txtFileIn1.setText(f1);
            txtFileIn2.setText(f2);
            txtFileOut.setText("c:\\testing\\output.html");
            chkDiff.setSelected(diff);
        }
    }

    /**
     * Carries out the user-chosen process
     */
    private void process()
    {
        int mode = getMode();
        String err = null;
        ModelTable table;
        TablePostProcessor processor = new TablePostProcessor();


        if (goodToGo)
        {
            switch (mode)
            {
                case 0:
                    // Versioned Document -> Table
                    try
                    {
                        table = Threepio.docToTable(cols, txtModelName1.getText(), fileIn1.getAbsolutePath(), "Object");

                        // using getParent() is okay here since the GUI always has full paths.
                       processor.deMarkupTable(table, new File(fileOut.getParent() + FileIntake.fileSep + "post.err"), getTypeCol());

                        Threepio.printModelTable(table, fileOut, chkDiff.isSelected(), chkProfiles.isSelected(), chkLooks.isSelected());


                    } catch (Exception ex)
                    {
                        Logger.getLogger(TRminatorGUI.class.getName()).log(Level.SEVERE, "could not make table", ex);
                        err = ex.getMessage();

                        if (err == null || err.isEmpty())
                        {
                            err = "unknown error.\nPlease contact jhoule@iol.unh.edu with stack trace.";
                        }
                        JOptionPane.showMessageDialog(this, err, "Error while making table", JOptionPane.ERROR_MESSAGE);
                        goodToGo = false;
                        checkGood();
                    }

                    break;

                case 1:
                    // XML -> Table
                    try
                    {
                        Threepio.xmlToPrintedTable(cols, containerName, fileIn1.getAbsolutePath(), fileOut);
                    } catch (Exception ex)
                    {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error while making tables", JOptionPane.ERROR_MESSAGE);
                        goodToGo = false;
                        checkGood();
                    }

                    break;

                case 2:
                    // diffing two versioned documents -> table
                    try
                    {
                        table = Threepio.diffTwoTables(cols, txtModelName1.getText(), fileIn1.getAbsolutePath(), txtModelName2.getText(), fileIn2.getAbsolutePath(), fileOut, "Object");

                        // using getParent() is okay here since the GUI always has full paths.
                        processor.deMarkupTable(table, new File(fileOut.getParent() + FileIntake.fileSep + "post.err"), getTypeCol());

                        Threepio.printTable(table, fileOut, true, chkLooks.isSelected());

                    } catch (Exception ex)
                    {
                        err = ex.getMessage();

                        if (err == null || err.isEmpty())
                        {
                            err = "unknown error.\nPlease contact jhoule@iol.unh.edu with stack trace.";
                        }
                        JOptionPane.showMessageDialog(this, err, "Error while diffing tables", JOptionPane.ERROR_MESSAGE);
                        goodToGo = false;
                        checkGood();
                    }

                    break;

                default:
                    JOptionPane.showMessageDialog(this, "please choose a valid mode.", "bad or uknown mode", JOptionPane.ERROR_MESSAGE);
                    goodToGo = false;
                    checkGood();
                    break;

            }

            if (goodToGo)
            {
                txtDone.setText("File complete" + System.getProperty("line.separator") + "Location: " + fileOut.getAbsolutePath());
            }


        } else
        {
            JOptionPane.showMessageDialog(this, "Conditions aren't right for processing the information." +
                    "\nDid you change something after loading files?",
                    "Fatal Error", JOptionPane.ERROR_MESSAGE);

            goodToGo = false;
            checkGood();
        }
    }

    /**
     * Attempts to load all files and models required. Returns true if it could do so.
     * returns false if not.
     * @return true if load worked, false if not.
     */
    private boolean load()
    {

        txtDone.setText("");

        try
        {
            fileOut = new File(txtFileOut.getText());
            fileOut.delete();
            fileOut.createNewFile();
        } catch (Exception ex)
        {
            System.err.println("could not make output file!");
            JOptionPane.showMessageDialog(this, "Output to this file is not possible. Check path.", "Cannot save here.", JOptionPane.ERROR_MESSAGE);
            return false;
        }


        if (!fileOut.exists())
        {
            System.err.println("could not make output file!");
            JOptionPane.showMessageDialog(this, "Output to this file is not possible. Check path.", "Cannot save here.", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // first file is always loaded.

        try
        {
            fileIn1 = new File(txtFileIn1.getText());

        } catch (Exception ex)
        {
            System.err.println("could not open input file!");
            JOptionPane.showMessageDialog(this, "Input file #1 not available. Please Fix!", "File Open or Not Found.", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (fileIn1 == null || !fileIn1.exists())
        {
            System.err.println("could not open input file!");
            JOptionPane.showMessageDialog(this, "Input file #1 not available. Please Fix!", "File Open or Not Found.", JOptionPane.ERROR_MESSAGE);

            return false;
        } else
        {
            // using getParent() is okay here since the GUI always has full paths.
            lblDirName.setText(fileIn1.getParent());
        }

        if (getMode() == 2)
        {
            try
            {
                fileIn2 = new File(txtFileIn2.getText());

            } catch (Exception ex)
            {
                System.err.println("could not open input file!");
                JOptionPane.showMessageDialog(this, "Input file #2 not available. Please Fix!", "File Open or Not Found.", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            if (fileIn2 == null || !fileIn2.exists())
            {
                System.err.println("could not open input file!");
                JOptionPane.showMessageDialog(this, "Input file #2 not available. Please Fix!", "File Open or Not Found.", JOptionPane.ERROR_MESSAGE);

                return false;
            }
        }

        if (theStrainer())
        {
            txtDone.setText("File(s) Loaded.");

            return true;
        }

        return false;
    }

    /**
     * Scrutinizes the user's input for perfection, returning true only
     * if the info allows the chosen process to be carried out.
     * @return true if the user's input is valid
     */
    private boolean theStrainer()
    {

        XDocumenter doccer = new XDocumenter();
        String missingDepends = null;

        boolean go = true;

        switch (getMode())
        {
            case 0:
            {
                try
                {
                    modelNames1 = doccer.getModelNames(fileIn1);
                    changeModel(1);

                    missingDepends = Threepio.getMissingDepends(fileIn1.getAbsolutePath(), txtModelName1.getText());

                    if (missingDepends.isEmpty())
                    {
                        go = true;
                    } else
                    {
                        go =
                                (JOptionPane.showConfirmDialog(this, "The following files are missing:\n" + missingDepends + "\nAttempt To Continue?",
                                "Missing Dependencies", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION);
                    }

                } catch (Exception ex)
                {
                    Logger.getLogger(TRminatorGUI.class.getName()).log(Level.SEVERE, "could not find model,\nor a table is missing a table association", ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Check Files", JOptionPane.ERROR_MESSAGE);

                    go = false;

                }

                return (go && !(txtModelName1.getText() == null || txtModelName1.getText().isEmpty()));
            }

            case 1:
            {
                containerName = txtContainerName.getText();

                return (!(containerName == null || containerName.isEmpty()));
            }

            case 2:
            {
                try
                {
                    modelNames1 = doccer.getModelNames(fileIn1);
                    modelNames2 = doccer.getModelNames(fileIn2);
                    changeModel(1);
                    changeModel(2);

                    missingDepends = Threepio.getMissingDepends(fileIn1.getAbsolutePath(), txtModelName1.getText()) + Threepio.getMissingDepends(fileIn2.getAbsolutePath(), txtModelName2.getText());
                    if (missingDepends.isEmpty())
                    {
                        go = true;
                    } else
                    {
                        go =
                                (JOptionPane.showConfirmDialog(this, "The following files are missing:\n" + missingDepends + "\nAttempt To Continue?",
                                "Missing Dependencies", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION);
                    }

                } catch (Exception ex)
                {
                    Logger.getLogger(TRminatorGUI.class.getName()).log(Level.SEVERE, "could not find model,\nor a table is missing a table association", ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Check Files", JOptionPane.ERROR_MESSAGE);

                    go = false;

                }

                return (go && !(txtModelName1.getText() == null || txtModelName1.getText().isEmpty() ||
                        txtModelName2.getText() == null || txtModelName2.getText().isEmpty()));
            }
            default:
                // not a mode?
                return false;
        }
    }

    /**
     * makes the Go status and Go button both false.
     */
    private void noGo()
    {
        btnGo.setEnabled(goodToGo = false);
    }

    /**
     * pops up the file chooser for the user to use.
     * @param field - the field that should be filled with the path
     * @param opening - set to true if opening, false if saving.
     * @param dir - the file or directory to start at
     */
    private void useFileChooser(JTextField field, boolean opening, File dir)
    {
        JFileChooser chooser = new JFileChooser();

        File tempFile;

        noGo();

        tempFile = new File(field.getText());

        if (tempFile != null && tempFile.exists())
        {
            chooser.setSelectedFile(tempFile);
        } else
        {
            if (dir == null)
            {
                // open the file browser in execution directory.
                dir = FileIntake.currentDir();
            }

            if (dir != null && dir.exists())
            {
                chooser.setSelectedFile(dir);
            }

        }

        if (opening)
        {
            chooser.showOpenDialog(this);
        } else
        {


            chooser.showSaveDialog(this);
        }

        if (chooser.getSelectedFile() != null && (!opening || chooser.getSelectedFile().exists()))
        {
            field.setText(chooser.getSelectedFile().getAbsolutePath());
        }

        field.updateUI();
    }

    /**
     * gets the number of the mode currently chosen.
     * @return the number of the mode.
     */
    @SuppressWarnings("empty-statement")
    private int getMode()
    {
        JRadioButton[] modes =
        {
            radVDT, radGXT, radNSDDT
        };

        int i;
        for (i = 0; i < modes.length && !modes[i].isSelected(); i++);

        // check for error.
        if (i == modes.length)
        {
            return -1;
        }

        return i;
    }

    /**
     * Changes the form based on the user's selection of a new mode.
     */
    private void updateFormForMode()
    {
        clearFields(false);

        ArrayList<JComponent> on = new ArrayList<JComponent>(), off = new ArrayList<JComponent>();

        // always on:
        on.add(pnlInput0);
        on.add(pnlInput1);
        on.add(pnlMode);
        on.add(pnlOut);

        switch (getMode())
        {
            case 0:
                // on:
                on.add(pnlOptions);
                on.add(pnlModel1);
                on.add(chkDiff);
                on.add(chkProfiles);
                on.add(chkLooks);

                // off:
                off.add(pnlContainer);
                off.add(pnlInput2);

                btnLoad.setText("Load File");

                break;

            case 1:
                // on:
                on.add(pnlContainer);


                // off:
                off.add(pnlModel1);
                off.add(pnlInput2);
                off.add(pnlOptions);
                off.add(chkDiff);
                off.add(chkProfiles);
                off.add(chkLooks);

                btnLoad.setText("Load File");

                break;

            case 2:
                // on:
                on.add(pnlModel1);
                on.add(pnlInput2);
                on.add(chkLooks);

                // off:
                off.add(pnlOptions);
                off.add(pnlContainer);
                off.add(chkDiff);
                off.add(chkProfiles);

                btnLoad.setText("Load Files");


                break;

            default:
                System.err.println("unknown or bad mode");
                break;

        }

        // then do stuff based on the lists.

        for (int i = 0; i < off.size(); i++)
        {
            off.get(i).setVisible(false);
        }

        for (int j = 0; j < on.size(); j++)
        {
            on.get(j).setVisible(true);
        }
    }

    /**
     * Clears the fields, with a flag whether to clear output fields.
     * @param includeOut - tells the method to include output fields or not.
     */
    private void clearFields(boolean includeOut, boolean includeIn)
    {
        txtContainerName.setText("");


        txtModelName1.setText("");
        txtModelName2.setText("");
        lblDirName.setText("");
        txtDone.setText("");

        fileIn1 = null;
        fileIn2 = null;
        txtModelName1.setEditable(false);
        txtModelName2.setEditable(false);

        if (includeIn)
        {
            txtFileIn1.setText("");
            txtFileIn2.setText("");
        }


        if (includeOut)
        {
            txtFileOut.setText("");
            fileOut = null;
        }

        goodToGo = false;
        checkGood();
    }

    /**
     * clears all fields, including input paths.
     * @param includeOut
     */
    public void clearFields(boolean includeOut)
    {
        clearFields(includeOut, true);
    }

    /**
     * changes the enabled state of the Go button based on if the rest of the
     * methods have set the flag(s) that allow it.
     */
    private void checkGood()
    {
        btnGo.setEnabled(goodToGo);
    }

    /**
     * Runs the instance of Threepio.
     * @param args the command line arguments
     */
    public static void main(final String appVersion, String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                new TRminatorGUI(appVersion).setVisible(true);
            }
        });
    }

    public int getTypeCol()
    {
        int typeCol;

        typeCol = cols.indexByKeyOf("Type");

        if (typeCol < 0)
        {
            return cols.indexByKeyOf("type");
        }

        return typeCol;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGo;
    private javax.swing.ButtonGroup btnGrpMode;
    private javax.swing.JButton btnInBrowse1;
    private javax.swing.JButton btnInBrowse2;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnOutBrowse;
    private javax.swing.JCheckBox chkDiff;
    private javax.swing.JCheckBox chkLooks;
    private javax.swing.JCheckBox chkProfiles;
    private javax.swing.JDialog diaOptions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblContainerName;
    private javax.swing.JLabel lblDir;
    private javax.swing.JLabel lblDirName;
    private javax.swing.JLabel lblInFile1;
    private javax.swing.JLabel lblInFile2;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblModel1;
    private javax.swing.JLabel lblModel2;
    private javax.swing.JLabel lblOutFile;
    private javax.swing.JLabel lblVersion;
    private javax.swing.JMenuBar menuBarMain;
    private javax.swing.JMenuItem mnuBtnChangeDir;
    private javax.swing.JMenuItem mnuBtnExit;
    private javax.swing.JMenuItem mnuCols;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlInput0;
    private javax.swing.JPanel pnlInput1;
    private javax.swing.JPanel pnlInput2;
    private javax.swing.JPanel pnlMode;
    private javax.swing.JPanel pnlModel1;
    private javax.swing.JPanel pnlModel2;
    private javax.swing.JPanel pnlOptions;
    private javax.swing.JPanel pnlOut;
    private javax.swing.JRadioButton radGXT;
    private javax.swing.JRadioButton radNSDDT;
    private javax.swing.JRadioButton radVDT;
    private javax.swing.JTextField txtContainerName;
    private javax.swing.JTextArea txtDone;
    private javax.swing.JTextField txtFileIn1;
    private javax.swing.JTextField txtFileIn2;
    private javax.swing.JTextField txtFileOut;
    private javax.swing.JTextField txtModelName1;
    private javax.swing.JTextField txtModelName2;
    // End of variables declaration//GEN-END:variables
}
